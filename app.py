import streamlit as st
import pandas as pd
import joblib

# Fun√ß√£o para gerar datas apenas com dia 01 a partir de 2025
def gerar_datas_primeiro_dia():
    datas = pd.date_range(start='2025-01-01', end='2027-12-01', freq='MS')
    return datas.to_list()

# Fun√ß√£o para identificar esta√ß√£o do ano
def estacao_do_ano(data):
    ano = data.year
    primavera = (pd.Timestamp(f'{ano}-09-23'), pd.Timestamp(f'{ano}-12-20'))
    verao     = (pd.Timestamp(f'{ano}-12-21'), pd.Timestamp(f'{ano+1}-03-19'))
    outono    = (pd.Timestamp(f'{ano}-03-20'), pd.Timestamp(f'{ano}-06-20'))
    inverno   = (pd.Timestamp(f'{ano}-06-21'), pd.Timestamp(f'{ano}-09-22'))

    if outono[0] <= data <= outono[1]:
        return 'Outono'
    elif inverno[0] <= data <= inverno[1]:
        return 'Inverno'
    elif primavera[0] <= data <= primavera[1]:
        return 'Primavera'
    elif data >= verao[0] or data <= verao[1]:
        return 'Ver√£o'

# Carrega modelo
modelo = joblib.load('modelo_random_forest.pkl')

# Cria abas
aba = st.tabs(["üìà Previs√£o", "üìÑ Sobre o Projeto"])

# -------- Aba de Previs√£o --------
with aba[0]:
    st.title("POSTECH - Data Analytics - Fase 4")
    st.subheader("Previs√£o do valor do Petr√≥leo - (FOB)")

    st.sidebar.header("Dados de entrada")

    datas_validas = gerar_datas_primeiro_dia()
    data = st.sidebar.selectbox("Selecione a Data (1¬∫ dia de cada m√™s)", datas_validas)

    producao = st.sidebar.number_input("Produ√ß√£o (MB/d) (ex: 1000)", min_value=100000, max_value=200000, step=1000)

    estacao = estacao_do_ano(pd.to_datetime(data))
    st.sidebar.markdown(f"**Esta√ß√£o do Ano:** {estacao}")

    entrada = {
        "Producao": producao,
        "Estacao_Outono": 1 if estacao == "Outono" else 0,
        "Estacao_Primavera": 1 if estacao == "Primavera" else 0,
        "Estacao_Ver√£o": 1 if estacao == "Ver√£o" else 0
    }
    df_input = pd.DataFrame([entrada])
    
    if st.button("Prever"):
        previsao = modelo.predict(df_input)
        st.success(f"Para a data **{data.strftime('%d/%m/%Y')}** ({estacao}), o valor previsto √©: **{previsao[0]:.2f}**")

        # --------- Previs√£o dos pr√≥ximos 5 meses ---------
        st.subheader("üìÖ Previs√£o para os pr√≥ximos 5 meses")

        datas_futuras = pd.date_range(start=data + pd.DateOffset(months=1), periods=5, freq='MS')

        lista_entradas = []
        for d in datas_futuras:
            est = estacao_do_ano(d)
            entrada_futura = {
                "Data": d.strftime("%Y-%m-%d"),
                "Estacao": est,
                "Producao": producao,
                "Estacao_Outono": 1 if est == "Outono" else 0,
                "Estacao_Primavera": 1 if est == "Primavera" else 0,
                "Estacao_Ver√£o": 1 if est == "Ver√£o" else 0
            }
            lista_entradas.append(entrada_futura)

        df_futuro = pd.DataFrame(lista_entradas)
        df_futuro_modelo = df_futuro[["Producao", "Estacao_Outono", "Estacao_Primavera", "Estacao_Ver√£o"]]
        previsoes_futuras = modelo.predict(df_futuro_modelo)
        df_futuro["Valor Previsto"] = previsoes_futuras

        st.dataframe(df_futuro[["Data", "Estacao", "Producao", "Valor Previsto"]].style.format({"Valor Previsto": "{:.2f}"}))



# -------- Aba Sobre o Projeto --------
with aba[1]:
    st.title("POSTECH - Data Analytics - Fase 4")

    st.markdown("""
        ### üõ¢Ô∏è Problema

        Voc√™ foi escalado como cientista de dados em uma grande empresa de petr√≥leo e recebeu a miss√£o de criar um **modelo preditivo** para estimar o **pre√ßo do petr√≥leo em d√≥lar**. Esse modelo ser√° integrado a uma **aplica√ß√£o interativa** desenvolvida com Streamlit, com o objetivo de auxiliar gestores na **tomada de decis√µes estrat√©gicas** com base na varia√ß√£o do pre√ßo do petr√≥leo.

        üìå **Base de dados principal**:  
        [Pre√ßo do petr√≥leo bruto Brent (IPEADATA)](http://www.ipeadata.gov.br/ExibeSerie.aspx?module=m&serid=1650971490&oper=view)

        ---

        ### üì¶ Entreg√°veis

        - ‚úÖ Link da aplica√ß√£o com o modelo preditivo em Streamlit  
        - ‚úÖ Notebook Python contendo toda a pipeline de constru√ß√£o do modelo  
        - ‚úÖ Descri√ß√£o do objetivo e abordagem adotada

        ---

        ### üí° Proposta

        Durante o desenvolvimento, percebeu-se que utilizar **apenas a s√©rie hist√≥rica do pre√ßo do petr√≥leo** n√£o seria suficiente para gerar um modelo robusto. Para enriquecer a an√°lise, foram incorporados **dados complementares**, especialmente sobre a **produ√ß√£o mundial de petr√≥leo**.

        Al√©m disso, estudos apontam que fatores **clim√°ticos** ‚Äî como o inverno em pa√≠ses do hemisf√©rio norte ‚Äî influenciam diretamente o consumo de petr√≥leo, o que pode provocar varia√ß√µes significativas no pre√ßo.

        üîç Com base nesses dados, o modelo buscar√° prever o valor m√©dio do barril de petr√≥leo considerando:

        - Volume de produ√ß√£o mundial (m√©dia di√°ria de barris)  
        - Esta√ß√£o do ano (como proxy para varia√ß√µes de consumo)  
        - Tend√™ncias hist√≥ricas

        O objetivo principal √© **identificar rela√ß√µes entre oferta (produ√ß√£o) e pre√ßo**, por exemplo:

        - Quedas na produ√ß√£o podem causar aumento no pre√ßo?  
        - Aumento na produ√ß√£o leva a redu√ß√£o de valor?

        ---

        ### üóÉÔ∏è Bases de Dados Utilizadas

        - üìà **Produ√ß√£o Mundial de Petr√≥leo**: [EIA - U.S. Energy Information Administration](https://www.eia.gov)
        - üí∞ **Pre√ßo por Barril (Brent - FOB)**: [IPEADATA - C√≥digo EIA366_PBRENT366](http://www.ipeadata.gov.br)

        ---
        """)