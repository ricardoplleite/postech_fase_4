import streamlit as st
import pandas as pd
import joblib

# Fun√ß√£o para gerar datas apenas com dia 01 a partir de 2025
def gerar_datas_primeiro_dia():
    datas = pd.date_range(start='2025-01-01', end='2027-12-01', freq='MS')
    return datas.to_list()

# Fun√ß√£o para identificar esta√ß√£o do ano
def estacao_do_ano(data):
    ano = data.year
    primavera = (pd.Timestamp(f'{ano}-09-23'), pd.Timestamp(f'{ano}-12-20'))
    verao     = (pd.Timestamp(f'{ano}-12-21'), pd.Timestamp(f'{ano+1}-03-19'))
    outono    = (pd.Timestamp(f'{ano}-03-20'), pd.Timestamp(f'{ano}-06-20'))
    inverno   = (pd.Timestamp(f'{ano}-06-21'), pd.Timestamp(f'{ano}-09-22'))

    if outono[0] <= data <= outono[1]:
        return 'Outono'
    elif inverno[0] <= data <= inverno[1]:
        return 'Inverno'
    elif primavera[0] <= data <= primavera[1]:
        return 'Primavera'
    elif data >= verao[0] or data <= verao[1]:
        return 'Ver√£o'

# Carrega modelo
modelo = joblib.load('modelo_random_forest.pkl')

# Cria abas
aba = st.tabs(["üìà Previs√£o", "üìÑ Sobre o Projeto"])

# -------- Aba de Previs√£o --------
with aba[0]:
    st.title("POSTECH - Data Analytics - Fase 4")
    st.subheader("Previs√£o do valor do Petr√≥leo - (FOB)")

    st.sidebar.header("Dados de entrada")

    datas_validas = gerar_datas_primeiro_dia()
    data = st.sidebar.selectbox("Selecione a Data (1¬∫ dia de cada m√™s)", datas_validas)

    producao = st.sidebar.number_input("Produ√ß√£o (MB/d) (ex: 1000)", min_value=100000, max_value=200000, step=1000)

    estacao = estacao_do_ano(pd.to_datetime(data))
    st.sidebar.markdown(f"**Esta√ß√£o do Ano:** {estacao}")

    entrada = {
        "Producao": producao,
        "Estacao_Outono": 1 if estacao == "Outono" else 0,
        "Estacao_Primavera": 1 if estacao == "Primavera" else 0,
        "Estacao_Ver√£o": 1 if estacao == "Ver√£o" else 0
    }
    df_input = pd.DataFrame([entrada])
    
    if st.button("Prever"):
        previsao = modelo.predict(df_input)
        st.success(f"Para a data **{data.strftime('%d/%m/%Y')}** ({estacao}), o valor previsto √©: **{previsao[0]:.2f}**")

        # --------- Previs√£o dos pr√≥ximos 5 meses ---------
        st.subheader("üìÖ Previs√£o para os pr√≥ximos 5 meses")

        datas_futuras = pd.date_range(start=data + pd.DateOffset(months=1), periods=5, freq='MS')

        lista_entradas = []
        for d in datas_futuras:
            est = estacao_do_ano(d)
            entrada_futura = {
                "Data": d.strftime("%Y-%m-%d"),
                "Estacao": est,
                "Producao": producao,
                "Estacao_Outono": 1 if est == "Outono" else 0,
                "Estacao_Primavera": 1 if est == "Primavera" else 0,
                "Estacao_Ver√£o": 1 if est == "Ver√£o" else 0
            }
            lista_entradas.append(entrada_futura)

        df_futuro = pd.DataFrame(lista_entradas)
        df_futuro_modelo = df_futuro[["Producao", "Estacao_Outono", "Estacao_Primavera", "Estacao_Ver√£o"]]
        previsoes_futuras = modelo.predict(df_futuro_modelo)
        df_futuro["Valor Previsto"] = previsoes_futuras

        st.dataframe(df_futuro[["Data", "Estacao", "Producao", "Valor Previsto"]].style.format({"Valor Previsto": "{:.2f}"}))



# -------- Aba Sobre o Projeto --------
with aba[1]:
    st.title("POSTECH - Data Analytics - Fase 4")

    st.markdown("""
### Problema:

Imagine que voc√™ foi escalado como cientista de dados em uma grande empresa de petr√≥leo e precisa criar um modelo preditivo para garantir qual ser√° a previs√£o do pre√ßo do petr√≥leo em d√≥lar e instanciar esse modelo preditivo em uma aplica√ß√£o para auxiliar na tomada de decis√£o. Utilize o Streamlit para realizar a interface visual da aplica√ß√£o e n√£o se esque√ßa de realizar o deploy do modelo nessa aplica√ß√£o.  
Base de dados a ser utilizada: [IPEADATA](http://www.ipeadata.gov.br/ExibeSerie.aspx?module=m&serid=1650971490&oper=view)

**A entrega deve conter:**
- Link da aplica√ß√£o do modelo preditivo no Streamlit
- Notebook Python com toda a pipeline de constru√ß√£o do modelo
- Desenvolvimento do objetivo

### Proposta:

Para enriquecer a an√°lise, foi necess√°rio coletar dados complementares, pois utilizar apenas a base de valores do petr√≥leo se mostrou insuficiente para o desenvolvimento eficiente do modelo de machine learning.

Para alcan√ßar o objetivo proposto, ser√° utilizada uma base de dados contendo informa√ß√µes sobre a produ√ß√£o de petr√≥leo por pa√≠s, incluindo a m√©dia di√°ria de barris produzidos.

Com esses dados, ser√° poss√≠vel cruzar a produ√ß√£o de cada pa√≠s com o valor m√©dio global do barril de petr√≥leo. O modelo ter√° como objetivo prever a rela√ß√£o entre produ√ß√£o e pre√ßo, ou seja, identificar se uma queda na produ√ß√£o mundial est√° associada a um aumento no valor do barril ‚Äî ou, inversamente, se um aumento na produ√ß√£o tende a reduzir seu pre√ßo.

### Bases de dados utilizadas:

- Produ√ß√£o mundial de petr√≥leo: [EIA - U.S. Energy Information Administration](https://www.eia.gov)
- Pre√ßo por barril do petr√≥leo bruto Brent (FOB) (EIA366_PBRENT366): [IPEADATA](http://www.ipeadata.gov.br)
""")
